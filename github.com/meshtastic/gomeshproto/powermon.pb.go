// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.6
// source: meshtastic/powermon.proto

package gomeshproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Any significant power changing event in meshtastic should be tagged with a powermon state transition.
// If you are making new meshtastic features feel free to add new entries at the end of this definition.
type PowerMon_State int32

const (
	PowerMon_None           PowerMon_State = 0
	PowerMon_CPU_DeepSleep  PowerMon_State = 1
	PowerMon_CPU_LightSleep PowerMon_State = 2
	// The external Vext1 power is on.  Many boards have auxillary power rails that the CPU turns on only
	// occasionally.  In cases where that rail has multiple devices on it we usually want to have logging on
	// the state of that rail as an independent record.
	// For instance on the Heltec Tracker 1.1 board, this rail is the power source for the GPS and screen.
	//
	// The log messages will be short and complete (see PowerMon.Event in the protobufs for details).
	// something like "S:PM:C,0x00001234,REASON" where the hex number is the bitmask of all current states.
	// (We use a bitmask for states so that if a log message gets lost it won't be fatal)
	PowerMon_Vext1_On       PowerMon_State = 4
	PowerMon_Lora_RXOn      PowerMon_State = 8
	PowerMon_Lora_TXOn      PowerMon_State = 16
	PowerMon_Lora_RXActive  PowerMon_State = 32
	PowerMon_BT_On          PowerMon_State = 64
	PowerMon_LED_On         PowerMon_State = 128
	PowerMon_Screen_On      PowerMon_State = 256
	PowerMon_Screen_Drawing PowerMon_State = 512
	PowerMon_Wifi_On        PowerMon_State = 1024
	// GPS is actively trying to find our location
	// See GPSPowerState for more details
	PowerMon_GPS_Active PowerMon_State = 2048
)

// Enum value maps for PowerMon_State.
var (
	PowerMon_State_name = map[int32]string{
		0:    "None",
		1:    "CPU_DeepSleep",
		2:    "CPU_LightSleep",
		4:    "Vext1_On",
		8:    "Lora_RXOn",
		16:   "Lora_TXOn",
		32:   "Lora_RXActive",
		64:   "BT_On",
		128:  "LED_On",
		256:  "Screen_On",
		512:  "Screen_Drawing",
		1024: "Wifi_On",
		2048: "GPS_Active",
	}
	PowerMon_State_value = map[string]int32{
		"None":           0,
		"CPU_DeepSleep":  1,
		"CPU_LightSleep": 2,
		"Vext1_On":       4,
		"Lora_RXOn":      8,
		"Lora_TXOn":      16,
		"Lora_RXActive":  32,
		"BT_On":          64,
		"LED_On":         128,
		"Screen_On":      256,
		"Screen_Drawing": 512,
		"Wifi_On":        1024,
		"GPS_Active":     2048,
	}
)

func (x PowerMon_State) Enum() *PowerMon_State {
	p := new(PowerMon_State)
	*p = x
	return p
}

func (x PowerMon_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerMon_State) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_powermon_proto_enumTypes[0].Descriptor()
}

func (PowerMon_State) Type() protoreflect.EnumType {
	return &file_meshtastic_powermon_proto_enumTypes[0]
}

func (x PowerMon_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerMon_State.Descriptor instead.
func (PowerMon_State) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_powermon_proto_rawDescGZIP(), []int{0, 0}
}

// What operation would we like the UUT to perform.
// note: senders should probably set want_response in their request packets, so that they can know when the state
// machine has started processing their request
type PowerStressMessage_Opcode int32

const (
	// Unset/unused
	PowerStressMessage_UNSET         PowerStressMessage_Opcode = 0
	PowerStressMessage_PRINT_INFO    PowerStressMessage_Opcode = 1   // Print board version slog and send an ack that we are alive and ready to process commands
	PowerStressMessage_FORCE_QUIET   PowerStressMessage_Opcode = 2   // Try to turn off all automatic processing of packets, screen, sleeping, etc (to make it easier to measure in isolation)
	PowerStressMessage_END_QUIET     PowerStressMessage_Opcode = 3   // Stop powerstress processing - probably by just rebooting the board
	PowerStressMessage_SCREEN_ON     PowerStressMessage_Opcode = 16  // Turn the screen on
	PowerStressMessage_SCREEN_OFF    PowerStressMessage_Opcode = 17  // Turn the screen off
	PowerStressMessage_CPU_IDLE      PowerStressMessage_Opcode = 32  // Let the CPU run but we assume mostly idling for num_seconds
	PowerStressMessage_CPU_DEEPSLEEP PowerStressMessage_Opcode = 33  // Force deep sleep for FIXME seconds
	PowerStressMessage_CPU_FULLON    PowerStressMessage_Opcode = 34  // Spin the CPU as fast as possible for num_seconds
	PowerStressMessage_LED_ON        PowerStressMessage_Opcode = 48  // Turn the LED on for num_seconds (and leave it on - for baseline power measurement purposes)
	PowerStressMessage_LED_OFF       PowerStressMessage_Opcode = 49  // Force the LED off for num_seconds
	PowerStressMessage_LORA_OFF      PowerStressMessage_Opcode = 64  // Completely turn off the LORA radio for num_seconds
	PowerStressMessage_LORA_TX       PowerStressMessage_Opcode = 65  // Send Lora packets for num_seconds
	PowerStressMessage_LORA_RX       PowerStressMessage_Opcode = 66  // Receive Lora packets for num_seconds (node will be mostly just listening, unless an external agent is helping stress this by sending packets on the current channel)
	PowerStressMessage_BT_OFF        PowerStressMessage_Opcode = 80  // Turn off the BT radio for num_seconds
	PowerStressMessage_BT_ON         PowerStressMessage_Opcode = 81  // Turn on the BT radio for num_seconds
	PowerStressMessage_WIFI_OFF      PowerStressMessage_Opcode = 96  // Turn off the WIFI radio for num_seconds
	PowerStressMessage_WIFI_ON       PowerStressMessage_Opcode = 97  // Turn on the WIFI radio for num_seconds
	PowerStressMessage_GPS_OFF       PowerStressMessage_Opcode = 112 // Turn off the GPS radio for num_seconds
	PowerStressMessage_GPS_ON        PowerStressMessage_Opcode = 113 // Turn on the GPS radio for num_seconds
)

// Enum value maps for PowerStressMessage_Opcode.
var (
	PowerStressMessage_Opcode_name = map[int32]string{
		0:   "UNSET",
		1:   "PRINT_INFO",
		2:   "FORCE_QUIET",
		3:   "END_QUIET",
		16:  "SCREEN_ON",
		17:  "SCREEN_OFF",
		32:  "CPU_IDLE",
		33:  "CPU_DEEPSLEEP",
		34:  "CPU_FULLON",
		48:  "LED_ON",
		49:  "LED_OFF",
		64:  "LORA_OFF",
		65:  "LORA_TX",
		66:  "LORA_RX",
		80:  "BT_OFF",
		81:  "BT_ON",
		96:  "WIFI_OFF",
		97:  "WIFI_ON",
		112: "GPS_OFF",
		113: "GPS_ON",
	}
	PowerStressMessage_Opcode_value = map[string]int32{
		"UNSET":         0,
		"PRINT_INFO":    1,
		"FORCE_QUIET":   2,
		"END_QUIET":     3,
		"SCREEN_ON":     16,
		"SCREEN_OFF":    17,
		"CPU_IDLE":      32,
		"CPU_DEEPSLEEP": 33,
		"CPU_FULLON":    34,
		"LED_ON":        48,
		"LED_OFF":       49,
		"LORA_OFF":      64,
		"LORA_TX":       65,
		"LORA_RX":       66,
		"BT_OFF":        80,
		"BT_ON":         81,
		"WIFI_OFF":      96,
		"WIFI_ON":       97,
		"GPS_OFF":       112,
		"GPS_ON":        113,
	}
)

func (x PowerStressMessage_Opcode) Enum() *PowerStressMessage_Opcode {
	p := new(PowerStressMessage_Opcode)
	*p = x
	return p
}

func (x PowerStressMessage_Opcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerStressMessage_Opcode) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_powermon_proto_enumTypes[1].Descriptor()
}

func (PowerStressMessage_Opcode) Type() protoreflect.EnumType {
	return &file_meshtastic_powermon_proto_enumTypes[1]
}

func (x PowerStressMessage_Opcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerStressMessage_Opcode.Descriptor instead.
func (PowerStressMessage_Opcode) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_powermon_proto_rawDescGZIP(), []int{1, 0}
}

// Note: There are no 'PowerMon' messages normally in use (PowerMons are sent only as structured logs - slogs).
// But we wrap our State enum in this message to effectively nest a namespace (without our linter yelling at us)
type PowerMon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PowerMon) Reset() {
	*x = PowerMon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_powermon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerMon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerMon) ProtoMessage() {}

func (x *PowerMon) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_powermon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerMon.ProtoReflect.Descriptor instead.
func (*PowerMon) Descriptor() ([]byte, []int) {
	return file_meshtastic_powermon_proto_rawDescGZIP(), []int{0}
}

// PowerStress testing support via the C++ PowerStress module
type PowerStressMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What type of HardwareMessage is this?
	Cmd        PowerStressMessage_Opcode `protobuf:"varint,1,opt,name=cmd,proto3,enum=meshtastic.PowerStressMessage_Opcode" json:"cmd,omitempty"`
	NumSeconds float32                   `protobuf:"fixed32,2,opt,name=num_seconds,json=numSeconds,proto3" json:"num_seconds,omitempty"`
}

func (x *PowerStressMessage) Reset() {
	*x = PowerStressMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_powermon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerStressMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerStressMessage) ProtoMessage() {}

func (x *PowerStressMessage) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_powermon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerStressMessage.ProtoReflect.Descriptor instead.
func (*PowerStressMessage) Descriptor() ([]byte, []int) {
	return file_meshtastic_powermon_proto_rawDescGZIP(), []int{1}
}

func (x *PowerStressMessage) GetCmd() PowerStressMessage_Opcode {
	if x != nil {
		return x.Cmd
	}
	return PowerStressMessage_UNSET
}

func (x *PowerStressMessage) GetNumSeconds() float32 {
	if x != nil {
		return x.NumSeconds
	}
	return 0
}

var File_meshtastic_powermon_proto protoreflect.FileDescriptor

var file_meshtastic_powermon_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65, 0x73,
	0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x22, 0xe0, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x50, 0x55, 0x5f,
	0x44, 0x65, 0x65, 0x70, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x50, 0x55, 0x5f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x56, 0x65, 0x78, 0x74, 0x31, 0x5f, 0x4f, 0x6e, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x6f, 0x72, 0x61, 0x5f, 0x52, 0x58, 0x4f, 0x6e, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x6f, 0x72, 0x61, 0x5f, 0x54, 0x58, 0x4f, 0x6e, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x6f, 0x72, 0x61, 0x5f, 0x52, 0x58, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x20, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x54, 0x5f, 0x4f, 0x6e, 0x10, 0x40, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x45, 0x44,
	0x5f, 0x4f, 0x6e, 0x10, 0x80, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x4f, 0x6e, 0x10, 0x80, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x10, 0x80, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x57,
	0x69, 0x66, 0x69, 0x5f, 0x4f, 0x6e, 0x10, 0x80, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x50, 0x53,
	0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x80, 0x10, 0x22, 0x90, 0x03, 0x0a, 0x12, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x06,
	0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x45, 0x54,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x49, 0x45, 0x54, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4f, 0x4e, 0x10, 0x10,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x11,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x20, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x50, 0x55, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10,
	0x21, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x50, 0x55, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x4f, 0x4e, 0x10,
	0x22, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x30, 0x12, 0x0b, 0x0a,
	0x07, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x31, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f,
	0x52, 0x41, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x40, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x52, 0x41,
	0x5f, 0x54, 0x58, 0x10, 0x41, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x52, 0x41, 0x5f, 0x52, 0x58,
	0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x50, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x54, 0x5f, 0x4f, 0x4e, 0x10, 0x51, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x46,
	0x49, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x60, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x46, 0x49, 0x5f,
	0x4f, 0x4e, 0x10, 0x61, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x50, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x10,
	0x70, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x50, 0x53, 0x5f, 0x4f, 0x4e, 0x10, 0x71, 0x42, 0x63, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x65, 0x65, 0x6b, 0x73, 0x76, 0x69, 0x6c, 0x6c, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x42, 0x0e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0xaa, 0x02, 0x14, 0x4d, 0x65, 0x73, 0x68, 0x74,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0xba,
	0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meshtastic_powermon_proto_rawDescOnce sync.Once
	file_meshtastic_powermon_proto_rawDescData = file_meshtastic_powermon_proto_rawDesc
)

func file_meshtastic_powermon_proto_rawDescGZIP() []byte {
	file_meshtastic_powermon_proto_rawDescOnce.Do(func() {
		file_meshtastic_powermon_proto_rawDescData = protoimpl.X.CompressGZIP(file_meshtastic_powermon_proto_rawDescData)
	})
	return file_meshtastic_powermon_proto_rawDescData
}

var file_meshtastic_powermon_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_meshtastic_powermon_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_meshtastic_powermon_proto_goTypes = []interface{}{
	(PowerMon_State)(0),            // 0: meshtastic.PowerMon.State
	(PowerStressMessage_Opcode)(0), // 1: meshtastic.PowerStressMessage.Opcode
	(*PowerMon)(nil),               // 2: meshtastic.PowerMon
	(*PowerStressMessage)(nil),     // 3: meshtastic.PowerStressMessage
}
var file_meshtastic_powermon_proto_depIdxs = []int32{
	1, // 0: meshtastic.PowerStressMessage.cmd:type_name -> meshtastic.PowerStressMessage.Opcode
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_meshtastic_powermon_proto_init() }
func file_meshtastic_powermon_proto_init() {
	if File_meshtastic_powermon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meshtastic_powermon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerMon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_powermon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerStressMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meshtastic_powermon_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtastic_powermon_proto_goTypes,
		DependencyIndexes: file_meshtastic_powermon_proto_depIdxs,
		EnumInfos:         file_meshtastic_powermon_proto_enumTypes,
		MessageInfos:      file_meshtastic_powermon_proto_msgTypes,
	}.Build()
	File_meshtastic_powermon_proto = out.File
	file_meshtastic_powermon_proto_rawDesc = nil
	file_meshtastic_powermon_proto_goTypes = nil
	file_meshtastic_powermon_proto_depIdxs = nil
}
