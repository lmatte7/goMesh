// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.6
// source: meshtastic/telemetry.proto

package gomeshproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported I2C Sensors for telemetry in Meshtastic
type TelemetrySensorType int32

const (
	// No external telemetry sensor explicitly set
	TelemetrySensorType_SENSOR_UNSET TelemetrySensorType = 0
	// High accuracy temperature, pressure, humidity
	TelemetrySensorType_BME280 TelemetrySensorType = 1
	// High accuracy temperature, pressure, humidity, and air resistance
	TelemetrySensorType_BME680 TelemetrySensorType = 2
	// Very high accuracy temperature
	TelemetrySensorType_MCP9808 TelemetrySensorType = 3
	// Moderate accuracy current and voltage
	TelemetrySensorType_INA260 TelemetrySensorType = 4
	// Moderate accuracy current and voltage
	TelemetrySensorType_INA219 TelemetrySensorType = 5
	// High accuracy temperature and pressure
	TelemetrySensorType_BMP280 TelemetrySensorType = 6
	// High accuracy temperature and humidity
	TelemetrySensorType_SHTC3 TelemetrySensorType = 7
	// High accuracy pressure
	TelemetrySensorType_LPS22 TelemetrySensorType = 8
	// 3-Axis magnetic sensor
	TelemetrySensorType_QMC6310 TelemetrySensorType = 9
	// 6-Axis inertial measurement sensor
	TelemetrySensorType_QMI8658 TelemetrySensorType = 10
	// 3-Axis magnetic sensor
	TelemetrySensorType_QMC5883L TelemetrySensorType = 11
	// High accuracy temperature and humidity
	TelemetrySensorType_SHT31 TelemetrySensorType = 12
	// PM2.5 air quality sensor
	TelemetrySensorType_PMSA003I TelemetrySensorType = 13
	// INA3221 3 Channel Voltage / Current Sensor
	TelemetrySensorType_INA3221 TelemetrySensorType = 14
	// BMP085/BMP180 High accuracy temperature and pressure (older Version of BMP280)
	TelemetrySensorType_BMP085 TelemetrySensorType = 15
	// RCWL-9620 Doppler Radar Distance Sensor, used for water level detection
	TelemetrySensorType_RCWL9620 TelemetrySensorType = 16
	// Sensirion High accuracy temperature and humidity
	TelemetrySensorType_SHT4X TelemetrySensorType = 17
	// VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.
	TelemetrySensorType_VEML7700 TelemetrySensorType = 18
	// MLX90632 non-contact IR temperature sensor.
	TelemetrySensorType_MLX90632 TelemetrySensorType = 19
	// TI OPT3001 Ambient Light Sensor
	TelemetrySensorType_OPT3001 TelemetrySensorType = 20
	// Lite On LTR-390UV-01 UV Light Sensor
	TelemetrySensorType_LTR390UV TelemetrySensorType = 21
	// AMS TSL25911FN RGB Light Sensor
	TelemetrySensorType_TSL25911FN TelemetrySensorType = 22
	// AHT10 Integrated temperature and humidity sensor
	TelemetrySensorType_AHT10 TelemetrySensorType = 23
	// DFRobot Lark Weather station (temperature, humidity, pressure, wind speed and direction)
	TelemetrySensorType_DFROBOT_LARK TelemetrySensorType = 24
	// NAU7802 Scale Chip or compatible
	TelemetrySensorType_NAU7802 TelemetrySensorType = 25
	// BMP3XX High accuracy temperature and pressure
	TelemetrySensorType_BMP3XX TelemetrySensorType = 26
	// ICM-20948 9-Axis digital motion processor
	TelemetrySensorType_ICM20948 TelemetrySensorType = 27
	// MAX17048 1S lipo battery sensor (voltage, state of charge, time to go)
	TelemetrySensorType_MAX17048 TelemetrySensorType = 28
	// Custom I2C sensor implementation based on https://github.com/meshtastic/i2c-sensor
	TelemetrySensorType_CUSTOM_SENSOR TelemetrySensorType = 29
	// MAX30102 Pulse Oximeter and Heart-Rate Sensor
	TelemetrySensorType_MAX30102 TelemetrySensorType = 30
	// MLX90614 non-contact IR temperature sensor.
	TelemetrySensorType_MLX90614 TelemetrySensorType = 31
)

// Enum value maps for TelemetrySensorType.
var (
	TelemetrySensorType_name = map[int32]string{
		0:  "SENSOR_UNSET",
		1:  "BME280",
		2:  "BME680",
		3:  "MCP9808",
		4:  "INA260",
		5:  "INA219",
		6:  "BMP280",
		7:  "SHTC3",
		8:  "LPS22",
		9:  "QMC6310",
		10: "QMI8658",
		11: "QMC5883L",
		12: "SHT31",
		13: "PMSA003I",
		14: "INA3221",
		15: "BMP085",
		16: "RCWL9620",
		17: "SHT4X",
		18: "VEML7700",
		19: "MLX90632",
		20: "OPT3001",
		21: "LTR390UV",
		22: "TSL25911FN",
		23: "AHT10",
		24: "DFROBOT_LARK",
		25: "NAU7802",
		26: "BMP3XX",
		27: "ICM20948",
		28: "MAX17048",
		29: "CUSTOM_SENSOR",
		30: "MAX30102",
		31: "MLX90614",
	}
	TelemetrySensorType_value = map[string]int32{
		"SENSOR_UNSET":  0,
		"BME280":        1,
		"BME680":        2,
		"MCP9808":       3,
		"INA260":        4,
		"INA219":        5,
		"BMP280":        6,
		"SHTC3":         7,
		"LPS22":         8,
		"QMC6310":       9,
		"QMI8658":       10,
		"QMC5883L":      11,
		"SHT31":         12,
		"PMSA003I":      13,
		"INA3221":       14,
		"BMP085":        15,
		"RCWL9620":      16,
		"SHT4X":         17,
		"VEML7700":      18,
		"MLX90632":      19,
		"OPT3001":       20,
		"LTR390UV":      21,
		"TSL25911FN":    22,
		"AHT10":         23,
		"DFROBOT_LARK":  24,
		"NAU7802":       25,
		"BMP3XX":        26,
		"ICM20948":      27,
		"MAX17048":      28,
		"CUSTOM_SENSOR": 29,
		"MAX30102":      30,
		"MLX90614":      31,
	}
)

func (x TelemetrySensorType) Enum() *TelemetrySensorType {
	p := new(TelemetrySensorType)
	*p = x
	return p
}

func (x TelemetrySensorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetrySensorType) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_telemetry_proto_enumTypes[0].Descriptor()
}

func (TelemetrySensorType) Type() protoreflect.EnumType {
	return &file_meshtastic_telemetry_proto_enumTypes[0]
}

func (x TelemetrySensorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetrySensorType.Descriptor instead.
func (TelemetrySensorType) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{0}
}

// Key native device metrics such as battery level
type DeviceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0-100 (>100 means powered)
	BatteryLevel *uint32 `protobuf:"varint,1,opt,name=battery_level,json=batteryLevel,proto3,oneof" json:"battery_level,omitempty"`
	// Voltage measured
	Voltage *float32 `protobuf:"fixed32,2,opt,name=voltage,proto3,oneof" json:"voltage,omitempty"`
	// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
	ChannelUtilization *float32 `protobuf:"fixed32,3,opt,name=channel_utilization,json=channelUtilization,proto3,oneof" json:"channel_utilization,omitempty"`
	// Percent of airtime for transmission used within the last hour.
	AirUtilTx *float32 `protobuf:"fixed32,4,opt,name=air_util_tx,json=airUtilTx,proto3,oneof" json:"air_util_tx,omitempty"`
	// How long the device has been running since the last reboot (in seconds)
	UptimeSeconds *uint32 `protobuf:"varint,5,opt,name=uptime_seconds,json=uptimeSeconds,proto3,oneof" json:"uptime_seconds,omitempty"`
}

func (x *DeviceMetrics) Reset() {
	*x = DeviceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetrics) ProtoMessage() {}

func (x *DeviceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetrics.ProtoReflect.Descriptor instead.
func (*DeviceMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceMetrics) GetBatteryLevel() uint32 {
	if x != nil && x.BatteryLevel != nil {
		return *x.BatteryLevel
	}
	return 0
}

func (x *DeviceMetrics) GetVoltage() float32 {
	if x != nil && x.Voltage != nil {
		return *x.Voltage
	}
	return 0
}

func (x *DeviceMetrics) GetChannelUtilization() float32 {
	if x != nil && x.ChannelUtilization != nil {
		return *x.ChannelUtilization
	}
	return 0
}

func (x *DeviceMetrics) GetAirUtilTx() float32 {
	if x != nil && x.AirUtilTx != nil {
		return *x.AirUtilTx
	}
	return 0
}

func (x *DeviceMetrics) GetUptimeSeconds() uint32 {
	if x != nil && x.UptimeSeconds != nil {
		return *x.UptimeSeconds
	}
	return 0
}

// Weather station or other environmental metrics
type EnvironmentMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Temperature measured
	Temperature *float32 `protobuf:"fixed32,1,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// Relative humidity percent measured
	RelativeHumidity *float32 `protobuf:"fixed32,2,opt,name=relative_humidity,json=relativeHumidity,proto3,oneof" json:"relative_humidity,omitempty"`
	// Barometric pressure in hPA measured
	BarometricPressure *float32 `protobuf:"fixed32,3,opt,name=barometric_pressure,json=barometricPressure,proto3,oneof" json:"barometric_pressure,omitempty"`
	// Gas resistance in MOhm measured
	GasResistance *float32 `protobuf:"fixed32,4,opt,name=gas_resistance,json=gasResistance,proto3,oneof" json:"gas_resistance,omitempty"`
	// Voltage measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)
	Voltage *float32 `protobuf:"fixed32,5,opt,name=voltage,proto3,oneof" json:"voltage,omitempty"`
	// Current measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)
	Current *float32 `protobuf:"fixed32,6,opt,name=current,proto3,oneof" json:"current,omitempty"`
	// relative scale IAQ value as measured by Bosch BME680 . value 0-500.
	// Belongs to Air Quality but is not particle but VOC measurement. Other VOC values can also be put in here.
	Iaq *uint32 `protobuf:"varint,7,opt,name=iaq,proto3,oneof" json:"iaq,omitempty"`
	// RCWL9620 Doppler Radar Distance Sensor, used for water level detection. Float value in mm.
	Distance *float32 `protobuf:"fixed32,8,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	// VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.
	Lux *float32 `protobuf:"fixed32,9,opt,name=lux,proto3,oneof" json:"lux,omitempty"`
	// VEML7700 high accuracy white light(irradiance) not calibrated digital 16-bit resolution sensor.
	WhiteLux *float32 `protobuf:"fixed32,10,opt,name=white_lux,json=whiteLux,proto3,oneof" json:"white_lux,omitempty"`
	// Infrared lux
	IrLux *float32 `protobuf:"fixed32,11,opt,name=ir_lux,json=irLux,proto3,oneof" json:"ir_lux,omitempty"`
	// Ultraviolet lux
	UvLux *float32 `protobuf:"fixed32,12,opt,name=uv_lux,json=uvLux,proto3,oneof" json:"uv_lux,omitempty"`
	// Wind direction in degrees
	// 0 degrees = North, 90 = East, etc...
	WindDirection *uint32 `protobuf:"varint,13,opt,name=wind_direction,json=windDirection,proto3,oneof" json:"wind_direction,omitempty"`
	// Wind speed in m/s
	WindSpeed *float32 `protobuf:"fixed32,14,opt,name=wind_speed,json=windSpeed,proto3,oneof" json:"wind_speed,omitempty"`
	// Weight in KG
	Weight *float32 `protobuf:"fixed32,15,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	// Wind gust in m/s
	WindGust *float32 `protobuf:"fixed32,16,opt,name=wind_gust,json=windGust,proto3,oneof" json:"wind_gust,omitempty"`
	// Wind lull in m/s
	WindLull *float32 `protobuf:"fixed32,17,opt,name=wind_lull,json=windLull,proto3,oneof" json:"wind_lull,omitempty"`
}

func (x *EnvironmentMetrics) Reset() {
	*x = EnvironmentMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentMetrics) ProtoMessage() {}

func (x *EnvironmentMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentMetrics.ProtoReflect.Descriptor instead.
func (*EnvironmentMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *EnvironmentMetrics) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *EnvironmentMetrics) GetRelativeHumidity() float32 {
	if x != nil && x.RelativeHumidity != nil {
		return *x.RelativeHumidity
	}
	return 0
}

func (x *EnvironmentMetrics) GetBarometricPressure() float32 {
	if x != nil && x.BarometricPressure != nil {
		return *x.BarometricPressure
	}
	return 0
}

func (x *EnvironmentMetrics) GetGasResistance() float32 {
	if x != nil && x.GasResistance != nil {
		return *x.GasResistance
	}
	return 0
}

func (x *EnvironmentMetrics) GetVoltage() float32 {
	if x != nil && x.Voltage != nil {
		return *x.Voltage
	}
	return 0
}

func (x *EnvironmentMetrics) GetCurrent() float32 {
	if x != nil && x.Current != nil {
		return *x.Current
	}
	return 0
}

func (x *EnvironmentMetrics) GetIaq() uint32 {
	if x != nil && x.Iaq != nil {
		return *x.Iaq
	}
	return 0
}

func (x *EnvironmentMetrics) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *EnvironmentMetrics) GetLux() float32 {
	if x != nil && x.Lux != nil {
		return *x.Lux
	}
	return 0
}

func (x *EnvironmentMetrics) GetWhiteLux() float32 {
	if x != nil && x.WhiteLux != nil {
		return *x.WhiteLux
	}
	return 0
}

func (x *EnvironmentMetrics) GetIrLux() float32 {
	if x != nil && x.IrLux != nil {
		return *x.IrLux
	}
	return 0
}

func (x *EnvironmentMetrics) GetUvLux() float32 {
	if x != nil && x.UvLux != nil {
		return *x.UvLux
	}
	return 0
}

func (x *EnvironmentMetrics) GetWindDirection() uint32 {
	if x != nil && x.WindDirection != nil {
		return *x.WindDirection
	}
	return 0
}

func (x *EnvironmentMetrics) GetWindSpeed() float32 {
	if x != nil && x.WindSpeed != nil {
		return *x.WindSpeed
	}
	return 0
}

func (x *EnvironmentMetrics) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *EnvironmentMetrics) GetWindGust() float32 {
	if x != nil && x.WindGust != nil {
		return *x.WindGust
	}
	return 0
}

func (x *EnvironmentMetrics) GetWindLull() float32 {
	if x != nil && x.WindLull != nil {
		return *x.WindLull
	}
	return 0
}

// Power Metrics (voltage / current / etc)
type PowerMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Voltage (Ch1)
	Ch1Voltage *float32 `protobuf:"fixed32,1,opt,name=ch1_voltage,json=ch1Voltage,proto3,oneof" json:"ch1_voltage,omitempty"`
	// Current (Ch1)
	Ch1Current *float32 `protobuf:"fixed32,2,opt,name=ch1_current,json=ch1Current,proto3,oneof" json:"ch1_current,omitempty"`
	// Voltage (Ch2)
	Ch2Voltage *float32 `protobuf:"fixed32,3,opt,name=ch2_voltage,json=ch2Voltage,proto3,oneof" json:"ch2_voltage,omitempty"`
	// Current (Ch2)
	Ch2Current *float32 `protobuf:"fixed32,4,opt,name=ch2_current,json=ch2Current,proto3,oneof" json:"ch2_current,omitempty"`
	// Voltage (Ch3)
	Ch3Voltage *float32 `protobuf:"fixed32,5,opt,name=ch3_voltage,json=ch3Voltage,proto3,oneof" json:"ch3_voltage,omitempty"`
	// Current (Ch3)
	Ch3Current *float32 `protobuf:"fixed32,6,opt,name=ch3_current,json=ch3Current,proto3,oneof" json:"ch3_current,omitempty"`
}

func (x *PowerMetrics) Reset() {
	*x = PowerMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerMetrics) ProtoMessage() {}

func (x *PowerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerMetrics.ProtoReflect.Descriptor instead.
func (*PowerMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *PowerMetrics) GetCh1Voltage() float32 {
	if x != nil && x.Ch1Voltage != nil {
		return *x.Ch1Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh1Current() float32 {
	if x != nil && x.Ch1Current != nil {
		return *x.Ch1Current
	}
	return 0
}

func (x *PowerMetrics) GetCh2Voltage() float32 {
	if x != nil && x.Ch2Voltage != nil {
		return *x.Ch2Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh2Current() float32 {
	if x != nil && x.Ch2Current != nil {
		return *x.Ch2Current
	}
	return 0
}

func (x *PowerMetrics) GetCh3Voltage() float32 {
	if x != nil && x.Ch3Voltage != nil {
		return *x.Ch3Voltage
	}
	return 0
}

func (x *PowerMetrics) GetCh3Current() float32 {
	if x != nil && x.Ch3Current != nil {
		return *x.Ch3Current
	}
	return 0
}

// Air quality metrics
type AirQualityMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Concentration Units Standard PM1.0
	Pm10Standard *uint32 `protobuf:"varint,1,opt,name=pm10_standard,json=pm10Standard,proto3,oneof" json:"pm10_standard,omitempty"`
	// Concentration Units Standard PM2.5
	Pm25Standard *uint32 `protobuf:"varint,2,opt,name=pm25_standard,json=pm25Standard,proto3,oneof" json:"pm25_standard,omitempty"`
	// Concentration Units Standard PM10.0
	Pm100Standard *uint32 `protobuf:"varint,3,opt,name=pm100_standard,json=pm100Standard,proto3,oneof" json:"pm100_standard,omitempty"`
	// Concentration Units Environmental PM1.0
	Pm10Environmental *uint32 `protobuf:"varint,4,opt,name=pm10_environmental,json=pm10Environmental,proto3,oneof" json:"pm10_environmental,omitempty"`
	// Concentration Units Environmental PM2.5
	Pm25Environmental *uint32 `protobuf:"varint,5,opt,name=pm25_environmental,json=pm25Environmental,proto3,oneof" json:"pm25_environmental,omitempty"`
	// Concentration Units Environmental PM10.0
	Pm100Environmental *uint32 `protobuf:"varint,6,opt,name=pm100_environmental,json=pm100Environmental,proto3,oneof" json:"pm100_environmental,omitempty"`
	// 0.3um Particle Count
	Particles_03Um *uint32 `protobuf:"varint,7,opt,name=particles_03um,json=particles03um,proto3,oneof" json:"particles_03um,omitempty"`
	// 0.5um Particle Count
	Particles_05Um *uint32 `protobuf:"varint,8,opt,name=particles_05um,json=particles05um,proto3,oneof" json:"particles_05um,omitempty"`
	// 1.0um Particle Count
	Particles_10Um *uint32 `protobuf:"varint,9,opt,name=particles_10um,json=particles10um,proto3,oneof" json:"particles_10um,omitempty"`
	// 2.5um Particle Count
	Particles_25Um *uint32 `protobuf:"varint,10,opt,name=particles_25um,json=particles25um,proto3,oneof" json:"particles_25um,omitempty"`
	// 5.0um Particle Count
	Particles_50Um *uint32 `protobuf:"varint,11,opt,name=particles_50um,json=particles50um,proto3,oneof" json:"particles_50um,omitempty"`
	// 10.0um Particle Count
	Particles_100Um *uint32 `protobuf:"varint,12,opt,name=particles_100um,json=particles100um,proto3,oneof" json:"particles_100um,omitempty"`
}

func (x *AirQualityMetrics) Reset() {
	*x = AirQualityMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirQualityMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirQualityMetrics) ProtoMessage() {}

func (x *AirQualityMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirQualityMetrics.ProtoReflect.Descriptor instead.
func (*AirQualityMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *AirQualityMetrics) GetPm10Standard() uint32 {
	if x != nil && x.Pm10Standard != nil {
		return *x.Pm10Standard
	}
	return 0
}

func (x *AirQualityMetrics) GetPm25Standard() uint32 {
	if x != nil && x.Pm25Standard != nil {
		return *x.Pm25Standard
	}
	return 0
}

func (x *AirQualityMetrics) GetPm100Standard() uint32 {
	if x != nil && x.Pm100Standard != nil {
		return *x.Pm100Standard
	}
	return 0
}

func (x *AirQualityMetrics) GetPm10Environmental() uint32 {
	if x != nil && x.Pm10Environmental != nil {
		return *x.Pm10Environmental
	}
	return 0
}

func (x *AirQualityMetrics) GetPm25Environmental() uint32 {
	if x != nil && x.Pm25Environmental != nil {
		return *x.Pm25Environmental
	}
	return 0
}

func (x *AirQualityMetrics) GetPm100Environmental() uint32 {
	if x != nil && x.Pm100Environmental != nil {
		return *x.Pm100Environmental
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_03Um() uint32 {
	if x != nil && x.Particles_03Um != nil {
		return *x.Particles_03Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_05Um() uint32 {
	if x != nil && x.Particles_05Um != nil {
		return *x.Particles_05Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_10Um() uint32 {
	if x != nil && x.Particles_10Um != nil {
		return *x.Particles_10Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_25Um() uint32 {
	if x != nil && x.Particles_25Um != nil {
		return *x.Particles_25Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_50Um() uint32 {
	if x != nil && x.Particles_50Um != nil {
		return *x.Particles_50Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_100Um() uint32 {
	if x != nil && x.Particles_100Um != nil {
		return *x.Particles_100Um
	}
	return 0
}

// Local device mesh statistics
type LocalStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How long the device has been running since the last reboot (in seconds)
	UptimeSeconds uint32 `protobuf:"varint,1,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
	ChannelUtilization float32 `protobuf:"fixed32,2,opt,name=channel_utilization,json=channelUtilization,proto3" json:"channel_utilization,omitempty"`
	// Percent of airtime for transmission used within the last hour.
	AirUtilTx float32 `protobuf:"fixed32,3,opt,name=air_util_tx,json=airUtilTx,proto3" json:"air_util_tx,omitempty"`
	// Number of packets sent
	NumPacketsTx uint32 `protobuf:"varint,4,opt,name=num_packets_tx,json=numPacketsTx,proto3" json:"num_packets_tx,omitempty"`
	// Number of packets received (both good and bad)
	NumPacketsRx uint32 `protobuf:"varint,5,opt,name=num_packets_rx,json=numPacketsRx,proto3" json:"num_packets_rx,omitempty"`
	// Number of packets received that are malformed or violate the protocol
	NumPacketsRxBad uint32 `protobuf:"varint,6,opt,name=num_packets_rx_bad,json=numPacketsRxBad,proto3" json:"num_packets_rx_bad,omitempty"`
	// Number of nodes online (in the past 2 hours)
	NumOnlineNodes uint32 `protobuf:"varint,7,opt,name=num_online_nodes,json=numOnlineNodes,proto3" json:"num_online_nodes,omitempty"`
	// Number of nodes total
	NumTotalNodes uint32 `protobuf:"varint,8,opt,name=num_total_nodes,json=numTotalNodes,proto3" json:"num_total_nodes,omitempty"`
	// Number of received packets that were duplicates (due to multiple nodes relaying).
	// If this number is high, there are nodes in the mesh relaying packets when it's unnecessary, for example due to the ROUTER/REPEATER role.
	NumRxDupe uint32 `protobuf:"varint,9,opt,name=num_rx_dupe,json=numRxDupe,proto3" json:"num_rx_dupe,omitempty"`
	// Number of packets we transmitted that were a relay for others (not originating from ourselves).
	NumTxRelay uint32 `protobuf:"varint,10,opt,name=num_tx_relay,json=numTxRelay,proto3" json:"num_tx_relay,omitempty"`
	// Number of times we canceled a packet to be relayed, because someone else did it before us.
	// This will always be zero for ROUTERs/REPEATERs. If this number is high, some other node(s) is/are relaying faster than you.
	NumTxRelayCanceled uint32 `protobuf:"varint,11,opt,name=num_tx_relay_canceled,json=numTxRelayCanceled,proto3" json:"num_tx_relay_canceled,omitempty"`
}

func (x *LocalStats) Reset() {
	*x = LocalStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalStats) ProtoMessage() {}

func (x *LocalStats) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalStats.ProtoReflect.Descriptor instead.
func (*LocalStats) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *LocalStats) GetUptimeSeconds() uint32 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

func (x *LocalStats) GetChannelUtilization() float32 {
	if x != nil {
		return x.ChannelUtilization
	}
	return 0
}

func (x *LocalStats) GetAirUtilTx() float32 {
	if x != nil {
		return x.AirUtilTx
	}
	return 0
}

func (x *LocalStats) GetNumPacketsTx() uint32 {
	if x != nil {
		return x.NumPacketsTx
	}
	return 0
}

func (x *LocalStats) GetNumPacketsRx() uint32 {
	if x != nil {
		return x.NumPacketsRx
	}
	return 0
}

func (x *LocalStats) GetNumPacketsRxBad() uint32 {
	if x != nil {
		return x.NumPacketsRxBad
	}
	return 0
}

func (x *LocalStats) GetNumOnlineNodes() uint32 {
	if x != nil {
		return x.NumOnlineNodes
	}
	return 0
}

func (x *LocalStats) GetNumTotalNodes() uint32 {
	if x != nil {
		return x.NumTotalNodes
	}
	return 0
}

func (x *LocalStats) GetNumRxDupe() uint32 {
	if x != nil {
		return x.NumRxDupe
	}
	return 0
}

func (x *LocalStats) GetNumTxRelay() uint32 {
	if x != nil {
		return x.NumTxRelay
	}
	return 0
}

func (x *LocalStats) GetNumTxRelayCanceled() uint32 {
	if x != nil {
		return x.NumTxRelayCanceled
	}
	return 0
}

// Health telemetry metrics
type HealthMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Heart rate (beats per minute)
	HeartBpm *uint32 `protobuf:"varint,1,opt,name=heart_bpm,json=heartBpm,proto3,oneof" json:"heart_bpm,omitempty"`
	// SpO2 (blood oxygen saturation) level
	SpO2 *uint32 `protobuf:"varint,2,opt,name=spO2,proto3,oneof" json:"spO2,omitempty"`
	// Body temperature in degrees Celsius
	Temperature *float32 `protobuf:"fixed32,3,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
}

func (x *HealthMetrics) Reset() {
	*x = HealthMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthMetrics) ProtoMessage() {}

func (x *HealthMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthMetrics.ProtoReflect.Descriptor instead.
func (*HealthMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *HealthMetrics) GetHeartBpm() uint32 {
	if x != nil && x.HeartBpm != nil {
		return *x.HeartBpm
	}
	return 0
}

func (x *HealthMetrics) GetSpO2() uint32 {
	if x != nil && x.SpO2 != nil {
		return *x.SpO2
	}
	return 0
}

func (x *HealthMetrics) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

// Types of Measurements the telemetry module is equipped to handle
type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Seconds since 1970 - or 0 for unknown/unset
	Time uint32 `protobuf:"fixed32,1,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are assignable to Variant:
	//
	//	*Telemetry_DeviceMetrics
	//	*Telemetry_EnvironmentMetrics
	//	*Telemetry_AirQualityMetrics
	//	*Telemetry_PowerMetrics
	//	*Telemetry_LocalStats
	//	*Telemetry_HealthMetrics
	Variant isTelemetry_Variant `protobuf_oneof:"variant"`
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *Telemetry) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (m *Telemetry) GetVariant() isTelemetry_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *Telemetry) GetDeviceMetrics() *DeviceMetrics {
	if x, ok := x.GetVariant().(*Telemetry_DeviceMetrics); ok {
		return x.DeviceMetrics
	}
	return nil
}

func (x *Telemetry) GetEnvironmentMetrics() *EnvironmentMetrics {
	if x, ok := x.GetVariant().(*Telemetry_EnvironmentMetrics); ok {
		return x.EnvironmentMetrics
	}
	return nil
}

func (x *Telemetry) GetAirQualityMetrics() *AirQualityMetrics {
	if x, ok := x.GetVariant().(*Telemetry_AirQualityMetrics); ok {
		return x.AirQualityMetrics
	}
	return nil
}

func (x *Telemetry) GetPowerMetrics() *PowerMetrics {
	if x, ok := x.GetVariant().(*Telemetry_PowerMetrics); ok {
		return x.PowerMetrics
	}
	return nil
}

func (x *Telemetry) GetLocalStats() *LocalStats {
	if x, ok := x.GetVariant().(*Telemetry_LocalStats); ok {
		return x.LocalStats
	}
	return nil
}

func (x *Telemetry) GetHealthMetrics() *HealthMetrics {
	if x, ok := x.GetVariant().(*Telemetry_HealthMetrics); ok {
		return x.HealthMetrics
	}
	return nil
}

type isTelemetry_Variant interface {
	isTelemetry_Variant()
}

type Telemetry_DeviceMetrics struct {
	// Key native device metrics such as battery level
	DeviceMetrics *DeviceMetrics `protobuf:"bytes,2,opt,name=device_metrics,json=deviceMetrics,proto3,oneof"`
}

type Telemetry_EnvironmentMetrics struct {
	// Weather station or other environmental metrics
	EnvironmentMetrics *EnvironmentMetrics `protobuf:"bytes,3,opt,name=environment_metrics,json=environmentMetrics,proto3,oneof"`
}

type Telemetry_AirQualityMetrics struct {
	// Air quality metrics
	AirQualityMetrics *AirQualityMetrics `protobuf:"bytes,4,opt,name=air_quality_metrics,json=airQualityMetrics,proto3,oneof"`
}

type Telemetry_PowerMetrics struct {
	// Power Metrics
	PowerMetrics *PowerMetrics `protobuf:"bytes,5,opt,name=power_metrics,json=powerMetrics,proto3,oneof"`
}

type Telemetry_LocalStats struct {
	// Local device mesh statistics
	LocalStats *LocalStats `protobuf:"bytes,6,opt,name=local_stats,json=localStats,proto3,oneof"`
}

type Telemetry_HealthMetrics struct {
	// Health telemetry metrics
	HealthMetrics *HealthMetrics `protobuf:"bytes,7,opt,name=health_metrics,json=healthMetrics,proto3,oneof"`
}

func (*Telemetry_DeviceMetrics) isTelemetry_Variant() {}

func (*Telemetry_EnvironmentMetrics) isTelemetry_Variant() {}

func (*Telemetry_AirQualityMetrics) isTelemetry_Variant() {}

func (*Telemetry_PowerMetrics) isTelemetry_Variant() {}

func (*Telemetry_LocalStats) isTelemetry_Variant() {}

func (*Telemetry_HealthMetrics) isTelemetry_Variant() {}

// NAU7802 Telemetry configuration, for saving to flash
type Nau7802Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The offset setting for the NAU7802
	ZeroOffset int32 `protobuf:"varint,1,opt,name=zeroOffset,proto3" json:"zeroOffset,omitempty"`
	// The calibration factor for the NAU7802
	CalibrationFactor float32 `protobuf:"fixed32,2,opt,name=calibrationFactor,proto3" json:"calibrationFactor,omitempty"`
}

func (x *Nau7802Config) Reset() {
	*x = Nau7802Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nau7802Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nau7802Config) ProtoMessage() {}

func (x *Nau7802Config) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nau7802Config.ProtoReflect.Descriptor instead.
func (*Nau7802Config) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *Nau7802Config) GetZeroOffset() int32 {
	if x != nil {
		return x.ZeroOffset
	}
	return 0
}

func (x *Nau7802Config) GetCalibrationFactor() float32 {
	if x != nil {
		return x.CalibrationFactor
	}
	return 0
}

var File_meshtastic_telemetry_proto protoreflect.FileDescriptor

var file_meshtastic_telemetry_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65,
	0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x22, 0xb8, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x02, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x69, 0x72,
	0x5f, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03,
	0x52, 0x09, 0x61, 0x69, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0d, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x69, 0x72, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x78,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0xda, 0x06, 0x0a, 0x12, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x75,
	0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x10,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x02, 0x52, 0x12, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x61, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x03, 0x52, 0x0d, 0x67, 0x61, 0x73, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x61, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x06, 0x52, 0x03, 0x69, 0x61, 0x71, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c,
	0x75, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x03, 0x6c, 0x75, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x75, 0x78, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x08, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x75,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x72, 0x5f, 0x6c, 0x75, 0x78, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x05, 0x69, 0x72, 0x4c, 0x75, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x06, 0x75, 0x76, 0x5f, 0x6c, 0x75, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x0b, 0x52, 0x05, 0x75, 0x76, 0x4c, 0x75, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0d, 0x52, 0x09,
	0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0e, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x77, 0x69, 0x6e,
	0x64, 0x5f, 0x67, 0x75, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0f, 0x52, 0x08,
	0x77, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x77,
	0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x75, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x48, 0x10,
	0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x4c, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x75, 0x6d, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x61, 0x71, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6c, 0x75, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x75,
	0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x72, 0x5f, 0x6c, 0x75, 0x78, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x75, 0x76, 0x5f, 0x6c, 0x75, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x67, 0x75,
	0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x75, 0x6c, 0x6c,
	0x22, 0xd2, 0x02, 0x0a, 0x0c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x31, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x31, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x31, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0a,
	0x63, 0x68, 0x31, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x68, 0x32, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x68, 0x32, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x32, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x32, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x33,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04,
	0x52, 0x0a, 0x63, 0x68, 0x33, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x68, 0x33, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x33, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x31, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x31, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x32, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x32, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x33, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x33, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xab, 0x06, 0x0a, 0x11, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x6d, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6d, 0x31, 0x30, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x6d, 0x32, 0x35, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0c,
	0x70, 0x6d, 0x32, 0x35, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x70, 0x6d, 0x31, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x6d, 0x31, 0x30, 0x30,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x70,
	0x6d, 0x31, 0x30, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x11, 0x70, 0x6d, 0x31, 0x30, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x12, 0x70, 0x6d, 0x32, 0x35, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x11, 0x70,
	0x6d, 0x32, 0x35, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x70, 0x6d, 0x31, 0x30, 0x30, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x05, 0x52, 0x12, 0x70, 0x6d, 0x31, 0x30, 0x30, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x30, 0x33, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x06, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x30, 0x33,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x5f, 0x30, 0x35, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x30, 0x35, 0x75, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x31,
	0x30, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x31, 0x30, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x32, 0x35, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x32, 0x35, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x35, 0x30, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0a, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x35, 0x30,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x5f, 0x31, 0x30, 0x30, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x31, 0x30, 0x30, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6d, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6d, 0x32, 0x35, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x6d, 0x31, 0x30,
	0x30, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70,
	0x6d, 0x31, 0x30, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x6d, 0x32, 0x35, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x6d, 0x31,
	0x30, 0x30, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x30,
	0x33, 0x75, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x5f, 0x30, 0x35, 0x75, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x30, 0x75, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x32, 0x35, 0x75, 0x6d, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x35, 0x30, 0x75, 0x6d, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x30,
	0x30, 0x75, 0x6d, 0x22, 0xc4, 0x03, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x69,
	0x72, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x61, 0x69, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x54, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75,
	0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x54, 0x78,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x72, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x78, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x78,
	0x42, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e,
	0x75, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x78, 0x5f,
	0x64, 0x75, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52,
	0x78, 0x44, 0x75, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x78, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x54, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x74,
	0x78, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x54, 0x78, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x0d, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x09,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x70, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x08, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x70, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x70, 0x4f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x70, 0x4f, 0x32, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x70, 0x6d, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x70, 0x4f, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd2, 0x03, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4f,
	0x0a, 0x13, 0x61, 0x69, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x11, 0x61, 0x69,
	0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x3f, 0x0a, 0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x39, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x0d, 0x4e, 0x61,
	0x75, 0x37, 0x38, 0x30, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x7a,
	0x65, 0x72, 0x6f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x7a, 0x65, 0x72, 0x6f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2a, 0xc1, 0x03, 0x0a, 0x13, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4d, 0x45, 0x32, 0x38, 0x30, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x4d, 0x45, 0x36, 0x38, 0x30, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x43, 0x50, 0x39, 0x38, 0x30, 0x38, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x41, 0x32,
	0x36, 0x30, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x41, 0x32, 0x31, 0x39, 0x10, 0x05,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4d, 0x50, 0x32, 0x38, 0x30, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x48, 0x54, 0x43, 0x33, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x50, 0x53, 0x32, 0x32,
	0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x4d, 0x43, 0x36, 0x33, 0x31, 0x30, 0x10, 0x09, 0x12,
	0x0b, 0x0a, 0x07, 0x51, 0x4d, 0x49, 0x38, 0x36, 0x35, 0x38, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08,
	0x51, 0x4d, 0x43, 0x35, 0x38, 0x38, 0x33, 0x4c, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48,
	0x54, 0x33, 0x31, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4d, 0x53, 0x41, 0x30, 0x30, 0x33,
	0x49, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x41, 0x33, 0x32, 0x32, 0x31, 0x10, 0x0e,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4d, 0x50, 0x30, 0x38, 0x35, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x43, 0x57, 0x4c, 0x39, 0x36, 0x32, 0x30, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48,
	0x54, 0x34, 0x58, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x4d, 0x4c, 0x37, 0x37, 0x30,
	0x30, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4c, 0x58, 0x39, 0x30, 0x36, 0x33, 0x32, 0x10,
	0x13, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x33, 0x30, 0x30, 0x31, 0x10, 0x14, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x54, 0x52, 0x33, 0x39, 0x30, 0x55, 0x56, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x53, 0x4c, 0x32, 0x35, 0x39, 0x31, 0x31, 0x46, 0x4e, 0x10, 0x16, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x48, 0x54, 0x31, 0x30, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x46, 0x52, 0x4f, 0x42,
	0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x52, 0x4b, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x41, 0x55,
	0x37, 0x38, 0x30, 0x32, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4d, 0x50, 0x33, 0x58, 0x58,
	0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x43, 0x4d, 0x32, 0x30, 0x39, 0x34, 0x38, 0x10, 0x1b,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x58, 0x31, 0x37, 0x30, 0x34, 0x38, 0x10, 0x1c, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10,
	0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x58, 0x33, 0x30, 0x31, 0x30, 0x32, 0x10, 0x1e, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x4c, 0x58, 0x39, 0x30, 0x36, 0x31, 0x34, 0x10, 0x1f, 0x42, 0x64, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x65, 0x65, 0x6b, 0x73, 0x76, 0x69, 0x6c, 0x6c, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x42, 0x0f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0xaa, 0x02, 0x14, 0x4d, 0x65, 0x73, 0x68,
	0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73,
	0xba, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meshtastic_telemetry_proto_rawDescOnce sync.Once
	file_meshtastic_telemetry_proto_rawDescData = file_meshtastic_telemetry_proto_rawDesc
)

func file_meshtastic_telemetry_proto_rawDescGZIP() []byte {
	file_meshtastic_telemetry_proto_rawDescOnce.Do(func() {
		file_meshtastic_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_meshtastic_telemetry_proto_rawDescData)
	})
	return file_meshtastic_telemetry_proto_rawDescData
}

var file_meshtastic_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meshtastic_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_meshtastic_telemetry_proto_goTypes = []interface{}{
	(TelemetrySensorType)(0),   // 0: meshtastic.TelemetrySensorType
	(*DeviceMetrics)(nil),      // 1: meshtastic.DeviceMetrics
	(*EnvironmentMetrics)(nil), // 2: meshtastic.EnvironmentMetrics
	(*PowerMetrics)(nil),       // 3: meshtastic.PowerMetrics
	(*AirQualityMetrics)(nil),  // 4: meshtastic.AirQualityMetrics
	(*LocalStats)(nil),         // 5: meshtastic.LocalStats
	(*HealthMetrics)(nil),      // 6: meshtastic.HealthMetrics
	(*Telemetry)(nil),          // 7: meshtastic.Telemetry
	(*Nau7802Config)(nil),      // 8: meshtastic.Nau7802Config
}
var file_meshtastic_telemetry_proto_depIdxs = []int32{
	1, // 0: meshtastic.Telemetry.device_metrics:type_name -> meshtastic.DeviceMetrics
	2, // 1: meshtastic.Telemetry.environment_metrics:type_name -> meshtastic.EnvironmentMetrics
	4, // 2: meshtastic.Telemetry.air_quality_metrics:type_name -> meshtastic.AirQualityMetrics
	3, // 3: meshtastic.Telemetry.power_metrics:type_name -> meshtastic.PowerMetrics
	5, // 4: meshtastic.Telemetry.local_stats:type_name -> meshtastic.LocalStats
	6, // 5: meshtastic.Telemetry.health_metrics:type_name -> meshtastic.HealthMetrics
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_meshtastic_telemetry_proto_init() }
func file_meshtastic_telemetry_proto_init() {
	if File_meshtastic_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meshtastic_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirQualityMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_telemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_telemetry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nau7802Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_meshtastic_telemetry_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_meshtastic_telemetry_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_meshtastic_telemetry_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_meshtastic_telemetry_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_meshtastic_telemetry_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_meshtastic_telemetry_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Telemetry_DeviceMetrics)(nil),
		(*Telemetry_EnvironmentMetrics)(nil),
		(*Telemetry_AirQualityMetrics)(nil),
		(*Telemetry_PowerMetrics)(nil),
		(*Telemetry_LocalStats)(nil),
		(*Telemetry_HealthMetrics)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meshtastic_telemetry_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtastic_telemetry_proto_goTypes,
		DependencyIndexes: file_meshtastic_telemetry_proto_depIdxs,
		EnumInfos:         file_meshtastic_telemetry_proto_enumTypes,
		MessageInfos:      file_meshtastic_telemetry_proto_msgTypes,
	}.Build()
	File_meshtastic_telemetry_proto = out.File
	file_meshtastic_telemetry_proto_rawDesc = nil
	file_meshtastic_telemetry_proto_goTypes = nil
	file_meshtastic_telemetry_proto_depIdxs = nil
}
