// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.6
// source: meshtastic/admin.proto

package gomeshproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TODO: REPLACE
type AdminMessage_ConfigType int32

const (
	// TODO: REPLACE
	AdminMessage_DEVICE_CONFIG AdminMessage_ConfigType = 0
	// TODO: REPLACE
	AdminMessage_POSITION_CONFIG AdminMessage_ConfigType = 1
	// TODO: REPLACE
	AdminMessage_POWER_CONFIG AdminMessage_ConfigType = 2
	// TODO: REPLACE
	AdminMessage_NETWORK_CONFIG AdminMessage_ConfigType = 3
	// TODO: REPLACE
	AdminMessage_DISPLAY_CONFIG AdminMessage_ConfigType = 4
	// TODO: REPLACE
	AdminMessage_LORA_CONFIG AdminMessage_ConfigType = 5
	// TODO: REPLACE
	AdminMessage_BLUETOOTH_CONFIG AdminMessage_ConfigType = 6
	// TODO: REPLACE
	AdminMessage_SECURITY_CONFIG AdminMessage_ConfigType = 7
	AdminMessage_SESSIONKEY_CONFIG AdminMessage_ConfigType = 8
)

// Enum value maps for AdminMessage_ConfigType.
var (
	AdminMessage_ConfigType_name = map[int32]string{
		0: "DEVICE_CONFIG",
		1: "POSITION_CONFIG",
		2: "POWER_CONFIG",
		3: "NETWORK_CONFIG",
		4: "DISPLAY_CONFIG",
		5: "LORA_CONFIG",
		6: "BLUETOOTH_CONFIG",
		7: "SECURITY_CONFIG",
		8: "SESSIONKEY_CONFIG",
	}
	AdminMessage_ConfigType_value = map[string]int32{
		"DEVICE_CONFIG":     0,
		"POSITION_CONFIG":   1,
		"POWER_CONFIG":      2,
		"NETWORK_CONFIG":    3,
		"DISPLAY_CONFIG":    4,
		"LORA_CONFIG":       5,
		"BLUETOOTH_CONFIG":  6,
		"SECURITY_CONFIG":   7,
		"SESSIONKEY_CONFIG": 8,
	}
)

func (x AdminMessage_ConfigType) Enum() *AdminMessage_ConfigType {
	p := new(AdminMessage_ConfigType)
	*p = x
	return p
}

func (x AdminMessage_ConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminMessage_ConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_admin_proto_enumTypes[0].Descriptor()
}

func (AdminMessage_ConfigType) Type() protoreflect.EnumType {
	return &file_meshtastic_admin_proto_enumTypes[0]
}

func (x AdminMessage_ConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminMessage_ConfigType.Descriptor instead.
func (AdminMessage_ConfigType) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_admin_proto_rawDescGZIP(), []int{0, 0}
}

// TODO: REPLACE
type AdminMessage_ModuleConfigType int32

const (
	// TODO: REPLACE
	AdminMessage_MQTT_CONFIG AdminMessage_ModuleConfigType = 0
	// TODO: REPLACE
	AdminMessage_SERIAL_CONFIG AdminMessage_ModuleConfigType = 1
	// TODO: REPLACE
	AdminMessage_EXTNOTIF_CONFIG AdminMessage_ModuleConfigType = 2
	// TODO: REPLACE
	AdminMessage_STOREFORWARD_CONFIG AdminMessage_ModuleConfigType = 3
	// TODO: REPLACE
	AdminMessage_RANGETEST_CONFIG AdminMessage_ModuleConfigType = 4
	// TODO: REPLACE
	AdminMessage_TELEMETRY_CONFIG AdminMessage_ModuleConfigType = 5
	// TODO: REPLACE
	AdminMessage_CANNEDMSG_CONFIG AdminMessage_ModuleConfigType = 6
	// TODO: REPLACE
	AdminMessage_AUDIO_CONFIG AdminMessage_ModuleConfigType = 7
	// TODO: REPLACE
	AdminMessage_REMOTEHARDWARE_CONFIG AdminMessage_ModuleConfigType = 8
	// TODO: REPLACE
	AdminMessage_NEIGHBORINFO_CONFIG AdminMessage_ModuleConfigType = 9
	// TODO: REPLACE
	AdminMessage_AMBIENTLIGHTING_CONFIG AdminMessage_ModuleConfigType = 10
	// TODO: REPLACE
	AdminMessage_DETECTIONSENSOR_CONFIG AdminMessage_ModuleConfigType = 11
	// TODO: REPLACE
	AdminMessage_PAXCOUNTER_CONFIG AdminMessage_ModuleConfigType = 12
)

// Enum value maps for AdminMessage_ModuleConfigType.
var (
	AdminMessage_ModuleConfigType_name = map[int32]string{
		0:  "MQTT_CONFIG",
		1:  "SERIAL_CONFIG",
		2:  "EXTNOTIF_CONFIG",
		3:  "STOREFORWARD_CONFIG",
		4:  "RANGETEST_CONFIG",
		5:  "TELEMETRY_CONFIG",
		6:  "CANNEDMSG_CONFIG",
		7:  "AUDIO_CONFIG",
		8:  "REMOTEHARDWARE_CONFIG",
		9:  "NEIGHBORINFO_CONFIG",
		10: "AMBIENTLIGHTING_CONFIG",
		11: "DETECTIONSENSOR_CONFIG",
		12: "PAXCOUNTER_CONFIG",
	}
	AdminMessage_ModuleConfigType_value = map[string]int32{
		"MQTT_CONFIG":            0,
		"SERIAL_CONFIG":          1,
		"EXTNOTIF_CONFIG":        2,
		"STOREFORWARD_CONFIG":    3,
		"RANGETEST_CONFIG":       4,
		"TELEMETRY_CONFIG":       5,
		"CANNEDMSG_CONFIG":       6,
		"AUDIO_CONFIG":           7,
		"REMOTEHARDWARE_CONFIG":  8,
		"NEIGHBORINFO_CONFIG":    9,
		"AMBIENTLIGHTING_CONFIG": 10,
		"DETECTIONSENSOR_CONFIG": 11,
		"PAXCOUNTER_CONFIG":      12,
	}
)

func (x AdminMessage_ModuleConfigType) Enum() *AdminMessage_ModuleConfigType {
	p := new(AdminMessage_ModuleConfigType)
	*p = x
	return p
}

func (x AdminMessage_ModuleConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminMessage_ModuleConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_admin_proto_enumTypes[1].Descriptor()
}

func (AdminMessage_ModuleConfigType) Type() protoreflect.EnumType {
	return &file_meshtastic_admin_proto_enumTypes[1]
}

func (x AdminMessage_ModuleConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminMessage_ModuleConfigType.Descriptor instead.
func (AdminMessage_ModuleConfigType) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_admin_proto_rawDescGZIP(), []int{0, 1}
}

// This message is handled by the Admin module and is responsible for all settings/channel read/write operations.
// This message is used to do settings operations to both remote AND local nodes.
// (Prior to 1.2 these operations were done via special ToRadio operations)
type AdminMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node generates this key and sends it with any get_x_response packets.
	// The client MUST include the same key with any set_x commands. Key expires after 300 seconds.
	// Prevents replay attacks for admin messages.
	SessionPasskey []byte `protobuf:"bytes,101,opt,name=session_passkey,json=sessionPasskey,proto3" json:"session_passkey,omitempty"`
	// TODO: REPLACE
	//
	// Types that are assignable to PayloadVariant:
	//
	//	*AdminMessage_GetChannelRequest
	//	*AdminMessage_GetChannelResponse
	//	*AdminMessage_GetOwnerRequest
	//	*AdminMessage_GetOwnerResponse
	//	*AdminMessage_GetConfigRequest
	//	*AdminMessage_GetConfigResponse
	//	*AdminMessage_GetModuleConfigRequest
	//	*AdminMessage_GetModuleConfigResponse
	//	*AdminMessage_GetCannedMessageModuleMessagesRequest
	//	*AdminMessage_GetCannedMessageModuleMessagesResponse
	//	*AdminMessage_GetDeviceMetadataRequest
	//	*AdminMessage_GetDeviceMetadataResponse
	//	*AdminMessage_GetRingtoneRequest
	//	*AdminMessage_GetRingtoneResponse
	//	*AdminMessage_GetDeviceConnectionStatusRequest
	//	*AdminMessage_GetDeviceConnectionStatusResponse
	//	*AdminMessage_SetHamMode
	//	*AdminMessage_GetNodeRemoteHardwarePinsRequest
	//	*AdminMessage_GetNodeRemoteHardwarePinsResponse
	//	*AdminMessage_EnterDfuModeRequest
	//	*AdminMessage_DeleteFileRequest
	//	*AdminMessage_SetScale
	//	*AdminMessage_SetOwner
	//	*AdminMessage_SetChannel
	//	*AdminMessage_SetConfig
	//	*AdminMessage_SetModuleConfig
	//	*AdminMessage_SetCannedMessageModuleMessages
	//	*AdminMessage_SetRingtoneMessage
	//	*AdminMessage_RemoveByNodenum
	//	*AdminMessage_SetFavoriteNode
	//	*AdminMessage_RemoveFavoriteNode
	//	*AdminMessage_SetFixedPosition
	//	*AdminMessage_RemoveFixedPosition
	//	*AdminMessage_SetTimeOnly
	//	*AdminMessage_BeginEditSettings
	//	*AdminMessage_CommitEditSettings
	//	*AdminMessage_FactoryResetDevice
	//	*AdminMessage_RebootOtaSeconds
	//	*AdminMessage_ExitSimulator
	//	*AdminMessage_RebootSeconds
	//	*AdminMessage_ShutdownSeconds
	//	*AdminMessage_FactoryResetConfig
	//	*AdminMessage_NodedbReset
	PayloadVariant isAdminMessage_PayloadVariant `protobuf_oneof:"payload_variant"`
}

func (x *AdminMessage) Reset() {
	*x = AdminMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminMessage) ProtoMessage() {}

func (x *AdminMessage) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminMessage.ProtoReflect.Descriptor instead.
func (*AdminMessage) Descriptor() ([]byte, []int) {
	return file_meshtastic_admin_proto_rawDescGZIP(), []int{0}
}

func (x *AdminMessage) GetSessionPasskey() []byte {
	if x != nil {
		return x.SessionPasskey
	}
	return nil
}

func (m *AdminMessage) GetPayloadVariant() isAdminMessage_PayloadVariant {
	if m != nil {
		return m.PayloadVariant
	}
	return nil
}

func (x *AdminMessage) GetGetChannelRequest() uint32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetChannelRequest); ok {
		return x.GetChannelRequest
	}
	return 0
}

func (x *AdminMessage) GetGetChannelResponse() *Channel {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetChannelResponse); ok {
		return x.GetChannelResponse
	}
	return nil
}

func (x *AdminMessage) GetGetOwnerRequest() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetOwnerRequest); ok {
		return x.GetOwnerRequest
	}
	return false
}

func (x *AdminMessage) GetGetOwnerResponse() *User {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetOwnerResponse); ok {
		return x.GetOwnerResponse
	}
	return nil
}

func (x *AdminMessage) GetGetConfigRequest() AdminMessage_ConfigType {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetConfigRequest); ok {
		return x.GetConfigRequest
	}
	return AdminMessage_DEVICE_CONFIG
}

func (x *AdminMessage) GetGetConfigResponse() *Config {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetConfigResponse); ok {
		return x.GetConfigResponse
	}
	return nil
}

func (x *AdminMessage) GetGetModuleConfigRequest() AdminMessage_ModuleConfigType {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetModuleConfigRequest); ok {
		return x.GetModuleConfigRequest
	}
	return AdminMessage_MQTT_CONFIG
}

func (x *AdminMessage) GetGetModuleConfigResponse() *ModuleConfig {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetModuleConfigResponse); ok {
		return x.GetModuleConfigResponse
	}
	return nil
}

func (x *AdminMessage) GetGetCannedMessageModuleMessagesRequest() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetCannedMessageModuleMessagesRequest); ok {
		return x.GetCannedMessageModuleMessagesRequest
	}
	return false
}

func (x *AdminMessage) GetGetCannedMessageModuleMessagesResponse() string {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetCannedMessageModuleMessagesResponse); ok {
		return x.GetCannedMessageModuleMessagesResponse
	}
	return ""
}

func (x *AdminMessage) GetGetDeviceMetadataRequest() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetDeviceMetadataRequest); ok {
		return x.GetDeviceMetadataRequest
	}
	return false
}

func (x *AdminMessage) GetGetDeviceMetadataResponse() *DeviceMetadata {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetDeviceMetadataResponse); ok {
		return x.GetDeviceMetadataResponse
	}
	return nil
}

func (x *AdminMessage) GetGetRingtoneRequest() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetRingtoneRequest); ok {
		return x.GetRingtoneRequest
	}
	return false
}

func (x *AdminMessage) GetGetRingtoneResponse() string {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetRingtoneResponse); ok {
		return x.GetRingtoneResponse
	}
	return ""
}

func (x *AdminMessage) GetGetDeviceConnectionStatusRequest() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetDeviceConnectionStatusRequest); ok {
		return x.GetDeviceConnectionStatusRequest
	}
	return false
}

func (x *AdminMessage) GetGetDeviceConnectionStatusResponse() *DeviceConnectionStatus {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetDeviceConnectionStatusResponse); ok {
		return x.GetDeviceConnectionStatusResponse
	}
	return nil
}

func (x *AdminMessage) GetSetHamMode() *HamParameters {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetHamMode); ok {
		return x.SetHamMode
	}
	return nil
}

func (x *AdminMessage) GetGetNodeRemoteHardwarePinsRequest() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetNodeRemoteHardwarePinsRequest); ok {
		return x.GetNodeRemoteHardwarePinsRequest
	}
	return false
}

func (x *AdminMessage) GetGetNodeRemoteHardwarePinsResponse() *NodeRemoteHardwarePinsResponse {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_GetNodeRemoteHardwarePinsResponse); ok {
		return x.GetNodeRemoteHardwarePinsResponse
	}
	return nil
}

func (x *AdminMessage) GetEnterDfuModeRequest() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_EnterDfuModeRequest); ok {
		return x.EnterDfuModeRequest
	}
	return false
}

func (x *AdminMessage) GetDeleteFileRequest() string {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_DeleteFileRequest); ok {
		return x.DeleteFileRequest
	}
	return ""
}

func (x *AdminMessage) GetSetScale() uint32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetScale); ok {
		return x.SetScale
	}
	return 0
}

func (x *AdminMessage) GetSetOwner() *User {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetOwner); ok {
		return x.SetOwner
	}
	return nil
}

func (x *AdminMessage) GetSetChannel() *Channel {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetChannel); ok {
		return x.SetChannel
	}
	return nil
}

func (x *AdminMessage) GetSetConfig() *Config {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetConfig); ok {
		return x.SetConfig
	}
	return nil
}

func (x *AdminMessage) GetSetModuleConfig() *ModuleConfig {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetModuleConfig); ok {
		return x.SetModuleConfig
	}
	return nil
}

func (x *AdminMessage) GetSetCannedMessageModuleMessages() string {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetCannedMessageModuleMessages); ok {
		return x.SetCannedMessageModuleMessages
	}
	return ""
}

func (x *AdminMessage) GetSetRingtoneMessage() string {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetRingtoneMessage); ok {
		return x.SetRingtoneMessage
	}
	return ""
}

func (x *AdminMessage) GetRemoveByNodenum() uint32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_RemoveByNodenum); ok {
		return x.RemoveByNodenum
	}
	return 0
}

func (x *AdminMessage) GetSetFavoriteNode() uint32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetFavoriteNode); ok {
		return x.SetFavoriteNode
	}
	return 0
}

func (x *AdminMessage) GetRemoveFavoriteNode() uint32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_RemoveFavoriteNode); ok {
		return x.RemoveFavoriteNode
	}
	return 0
}

func (x *AdminMessage) GetSetFixedPosition() *Position {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetFixedPosition); ok {
		return x.SetFixedPosition
	}
	return nil
}

func (x *AdminMessage) GetRemoveFixedPosition() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_RemoveFixedPosition); ok {
		return x.RemoveFixedPosition
	}
	return false
}

func (x *AdminMessage) GetSetTimeOnly() uint32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_SetTimeOnly); ok {
		return x.SetTimeOnly
	}
	return 0
}

func (x *AdminMessage) GetBeginEditSettings() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_BeginEditSettings); ok {
		return x.BeginEditSettings
	}
	return false
}

func (x *AdminMessage) GetCommitEditSettings() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_CommitEditSettings); ok {
		return x.CommitEditSettings
	}
	return false
}

func (x *AdminMessage) GetFactoryResetDevice() int32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_FactoryResetDevice); ok {
		return x.FactoryResetDevice
	}
	return 0
}

func (x *AdminMessage) GetRebootOtaSeconds() int32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_RebootOtaSeconds); ok {
		return x.RebootOtaSeconds
	}
	return 0
}

func (x *AdminMessage) GetExitSimulator() bool {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_ExitSimulator); ok {
		return x.ExitSimulator
	}
	return false
}

func (x *AdminMessage) GetRebootSeconds() int32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_RebootSeconds); ok {
		return x.RebootSeconds
	}
	return 0
}

func (x *AdminMessage) GetShutdownSeconds() int32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_ShutdownSeconds); ok {
		return x.ShutdownSeconds
	}
	return 0
}

func (x *AdminMessage) GetFactoryResetConfig() int32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_FactoryResetConfig); ok {
		return x.FactoryResetConfig
	}
	return 0
}

func (x *AdminMessage) GetNodedbReset() int32 {
	if x, ok := x.GetPayloadVariant().(*AdminMessage_NodedbReset); ok {
		return x.NodedbReset
	}
	return 0
}

type isAdminMessage_PayloadVariant interface {
	isAdminMessage_PayloadVariant()
}

type AdminMessage_GetChannelRequest struct {
	// Send the specified channel in the response to this message
	// NOTE: This field is sent with the channel index + 1 (to ensure we never try to send 'zero' - which protobufs treats as not present)
	GetChannelRequest uint32 `protobuf:"varint,1,opt,name=get_channel_request,json=getChannelRequest,proto3,oneof"`
}

type AdminMessage_GetChannelResponse struct {
	// TODO: REPLACE
	GetChannelResponse *Channel `protobuf:"bytes,2,opt,name=get_channel_response,json=getChannelResponse,proto3,oneof"`
}

type AdminMessage_GetOwnerRequest struct {
	// Send the current owner data in the response to this message.
	GetOwnerRequest bool `protobuf:"varint,3,opt,name=get_owner_request,json=getOwnerRequest,proto3,oneof"`
}

type AdminMessage_GetOwnerResponse struct {
	// TODO: REPLACE
	GetOwnerResponse *User `protobuf:"bytes,4,opt,name=get_owner_response,json=getOwnerResponse,proto3,oneof"`
}

type AdminMessage_GetConfigRequest struct {
	// Ask for the following config data to be sent
	GetConfigRequest AdminMessage_ConfigType `protobuf:"varint,5,opt,name=get_config_request,json=getConfigRequest,proto3,enum=meshtastic.AdminMessage_ConfigType,oneof"`
}

type AdminMessage_GetConfigResponse struct {
	// Send the current Config in the response to this message.
	GetConfigResponse *Config `protobuf:"bytes,6,opt,name=get_config_response,json=getConfigResponse,proto3,oneof"`
}

type AdminMessage_GetModuleConfigRequest struct {
	// Ask for the following config data to be sent
	GetModuleConfigRequest AdminMessage_ModuleConfigType `protobuf:"varint,7,opt,name=get_module_config_request,json=getModuleConfigRequest,proto3,enum=meshtastic.AdminMessage_ModuleConfigType,oneof"`
}

type AdminMessage_GetModuleConfigResponse struct {
	// Send the current Config in the response to this message.
	GetModuleConfigResponse *ModuleConfig `protobuf:"bytes,8,opt,name=get_module_config_response,json=getModuleConfigResponse,proto3,oneof"`
}

type AdminMessage_GetCannedMessageModuleMessagesRequest struct {
	// Get the Canned Message Module messages in the response to this message.
	GetCannedMessageModuleMessagesRequest bool `protobuf:"varint,10,opt,name=get_canned_message_module_messages_request,json=getCannedMessageModuleMessagesRequest,proto3,oneof"`
}

type AdminMessage_GetCannedMessageModuleMessagesResponse struct {
	// Get the Canned Message Module messages in the response to this message.
	GetCannedMessageModuleMessagesResponse string `protobuf:"bytes,11,opt,name=get_canned_message_module_messages_response,json=getCannedMessageModuleMessagesResponse,proto3,oneof"`
}

type AdminMessage_GetDeviceMetadataRequest struct {
	// Request the node to send device metadata (firmware, protobuf version, etc)
	GetDeviceMetadataRequest bool `protobuf:"varint,12,opt,name=get_device_metadata_request,json=getDeviceMetadataRequest,proto3,oneof"`
}

type AdminMessage_GetDeviceMetadataResponse struct {
	// Device metadata response
	GetDeviceMetadataResponse *DeviceMetadata `protobuf:"bytes,13,opt,name=get_device_metadata_response,json=getDeviceMetadataResponse,proto3,oneof"`
}

type AdminMessage_GetRingtoneRequest struct {
	// Get the Ringtone in the response to this message.
	GetRingtoneRequest bool `protobuf:"varint,14,opt,name=get_ringtone_request,json=getRingtoneRequest,proto3,oneof"`
}

type AdminMessage_GetRingtoneResponse struct {
	// Get the Ringtone in the response to this message.
	GetRingtoneResponse string `protobuf:"bytes,15,opt,name=get_ringtone_response,json=getRingtoneResponse,proto3,oneof"`
}

type AdminMessage_GetDeviceConnectionStatusRequest struct {
	// Request the node to send it's connection status
	GetDeviceConnectionStatusRequest bool `protobuf:"varint,16,opt,name=get_device_connection_status_request,json=getDeviceConnectionStatusRequest,proto3,oneof"`
}

type AdminMessage_GetDeviceConnectionStatusResponse struct {
	// Device connection status response
	GetDeviceConnectionStatusResponse *DeviceConnectionStatus `protobuf:"bytes,17,opt,name=get_device_connection_status_response,json=getDeviceConnectionStatusResponse,proto3,oneof"`
}

type AdminMessage_SetHamMode struct {
	// Setup a node for licensed amateur (ham) radio operation
	SetHamMode *HamParameters `protobuf:"bytes,18,opt,name=set_ham_mode,json=setHamMode,proto3,oneof"`
}

type AdminMessage_GetNodeRemoteHardwarePinsRequest struct {
	// Get the mesh's nodes with their available gpio pins for RemoteHardware module use
	GetNodeRemoteHardwarePinsRequest bool `protobuf:"varint,19,opt,name=get_node_remote_hardware_pins_request,json=getNodeRemoteHardwarePinsRequest,proto3,oneof"`
}

type AdminMessage_GetNodeRemoteHardwarePinsResponse struct {
	// Respond with the mesh's nodes with their available gpio pins for RemoteHardware module use
	GetNodeRemoteHardwarePinsResponse *NodeRemoteHardwarePinsResponse `protobuf:"bytes,20,opt,name=get_node_remote_hardware_pins_response,json=getNodeRemoteHardwarePinsResponse,proto3,oneof"`
}

type AdminMessage_EnterDfuModeRequest struct {
	// Enter (UF2) DFU mode
	// Only implemented on NRF52 currently
	EnterDfuModeRequest bool `protobuf:"varint,21,opt,name=enter_dfu_mode_request,json=enterDfuModeRequest,proto3,oneof"`
}

type AdminMessage_DeleteFileRequest struct {
	// Delete the file by the specified path from the device
	DeleteFileRequest string `protobuf:"bytes,22,opt,name=delete_file_request,json=deleteFileRequest,proto3,oneof"`
}

type AdminMessage_SetScale struct {
	// Set zero and offset for scale chips
	SetScale uint32 `protobuf:"varint,23,opt,name=set_scale,json=setScale,proto3,oneof"`
}

type AdminMessage_SetOwner struct {
	// Set the owner for this node
	SetOwner *User `protobuf:"bytes,32,opt,name=set_owner,json=setOwner,proto3,oneof"`
}

type AdminMessage_SetChannel struct {
	// Set channels (using the new API).
	// A special channel is the "primary channel".
	// The other records are secondary channels.
	// Note: only one channel can be marked as primary.
	// If the client sets a particular channel to be primary, the previous channel will be set to SECONDARY automatically.
	SetChannel *Channel `protobuf:"bytes,33,opt,name=set_channel,json=setChannel,proto3,oneof"`
}

type AdminMessage_SetConfig struct {
	// Set the current Config
	SetConfig *Config `protobuf:"bytes,34,opt,name=set_config,json=setConfig,proto3,oneof"`
}

type AdminMessage_SetModuleConfig struct {
	// Set the current Config
	SetModuleConfig *ModuleConfig `protobuf:"bytes,35,opt,name=set_module_config,json=setModuleConfig,proto3,oneof"`
}

type AdminMessage_SetCannedMessageModuleMessages struct {
	// Set the Canned Message Module messages text.
	SetCannedMessageModuleMessages string `protobuf:"bytes,36,opt,name=set_canned_message_module_messages,json=setCannedMessageModuleMessages,proto3,oneof"`
}

type AdminMessage_SetRingtoneMessage struct {
	// Set the ringtone for ExternalNotification.
	SetRingtoneMessage string `protobuf:"bytes,37,opt,name=set_ringtone_message,json=setRingtoneMessage,proto3,oneof"`
}

type AdminMessage_RemoveByNodenum struct {
	// Remove the node by the specified node-num from the NodeDB on the device
	RemoveByNodenum uint32 `protobuf:"varint,38,opt,name=remove_by_nodenum,json=removeByNodenum,proto3,oneof"`
}

type AdminMessage_SetFavoriteNode struct {
	// Set specified node-num to be favorited on the NodeDB on the device
	SetFavoriteNode uint32 `protobuf:"varint,39,opt,name=set_favorite_node,json=setFavoriteNode,proto3,oneof"`
}

type AdminMessage_RemoveFavoriteNode struct {
	// Set specified node-num to be un-favorited on the NodeDB on the device
	RemoveFavoriteNode uint32 `protobuf:"varint,40,opt,name=remove_favorite_node,json=removeFavoriteNode,proto3,oneof"`
}

type AdminMessage_SetFixedPosition struct {
	// Set fixed position data on the node and then set the position.fixed_position = true
	SetFixedPosition *Position `protobuf:"bytes,41,opt,name=set_fixed_position,json=setFixedPosition,proto3,oneof"`
}

type AdminMessage_RemoveFixedPosition struct {
	// Clear fixed position coordinates and then set position.fixed_position = false
	RemoveFixedPosition bool `protobuf:"varint,42,opt,name=remove_fixed_position,json=removeFixedPosition,proto3,oneof"`
}

type AdminMessage_SetTimeOnly struct {
	// Set time only on the node
	// Convenience method to set the time on the node (as Net quality) without any other position data
	SetTimeOnly uint32 `protobuf:"fixed32,43,opt,name=set_time_only,json=setTimeOnly,proto3,oneof"`
}

type AdminMessage_BeginEditSettings struct {
	// Begins an edit transaction for config, module config, owner, and channel settings changes
	// This will delay the standard *implicit* save to the file system and subsequent reboot behavior until committed (commit_edit_settings)
	BeginEditSettings bool `protobuf:"varint,64,opt,name=begin_edit_settings,json=beginEditSettings,proto3,oneof"`
}

type AdminMessage_CommitEditSettings struct {
	// Commits an open transaction for any edits made to config, module config, owner, and channel settings
	CommitEditSettings bool `protobuf:"varint,65,opt,name=commit_edit_settings,json=commitEditSettings,proto3,oneof"`
}

type AdminMessage_FactoryResetDevice struct {
	// Tell the node to factory reset config everything; all device state and configuration will be returned to factory defaults and BLE bonds will be cleared.
	FactoryResetDevice int32 `protobuf:"varint,94,opt,name=factory_reset_device,json=factoryResetDevice,proto3,oneof"`
}

type AdminMessage_RebootOtaSeconds struct {
	// Tell the node to reboot into the OTA Firmware in this many seconds (or <0 to cancel reboot)
	// Only Implemented for ESP32 Devices. This needs to be issued to send a new main firmware via bluetooth.
	RebootOtaSeconds int32 `protobuf:"varint,95,opt,name=reboot_ota_seconds,json=rebootOtaSeconds,proto3,oneof"`
}

type AdminMessage_ExitSimulator struct {
	// This message is only supported for the simulator Portduino build.
	// If received the simulator will exit successfully.
	ExitSimulator bool `protobuf:"varint,96,opt,name=exit_simulator,json=exitSimulator,proto3,oneof"`
}

type AdminMessage_RebootSeconds struct {
	// Tell the node to reboot in this many seconds (or <0 to cancel reboot)
	RebootSeconds int32 `protobuf:"varint,97,opt,name=reboot_seconds,json=rebootSeconds,proto3,oneof"`
}

type AdminMessage_ShutdownSeconds struct {
	// Tell the node to shutdown in this many seconds (or <0 to cancel shutdown)
	ShutdownSeconds int32 `protobuf:"varint,98,opt,name=shutdown_seconds,json=shutdownSeconds,proto3,oneof"`
}

type AdminMessage_FactoryResetConfig struct {
	// Tell the node to factory reset config; all device state and configuration will be returned to factory defaults; BLE bonds will be preserved.
	FactoryResetConfig int32 `protobuf:"varint,99,opt,name=factory_reset_config,json=factoryResetConfig,proto3,oneof"`
}

type AdminMessage_NodedbReset struct {
	// Tell the node to reset the nodedb.
	NodedbReset int32 `protobuf:"varint,100,opt,name=nodedb_reset,json=nodedbReset,proto3,oneof"`
}

func (*AdminMessage_GetChannelRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetChannelResponse) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetOwnerRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetOwnerResponse) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetConfigRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetConfigResponse) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetModuleConfigRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetModuleConfigResponse) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetCannedMessageModuleMessagesRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetCannedMessageModuleMessagesResponse) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetDeviceMetadataRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetDeviceMetadataResponse) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetRingtoneRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetRingtoneResponse) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetDeviceConnectionStatusRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetDeviceConnectionStatusResponse) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetHamMode) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetNodeRemoteHardwarePinsRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_GetNodeRemoteHardwarePinsResponse) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_EnterDfuModeRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_DeleteFileRequest) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetScale) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetOwner) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetChannel) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetConfig) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetModuleConfig) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetCannedMessageModuleMessages) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetRingtoneMessage) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_RemoveByNodenum) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetFavoriteNode) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_RemoveFavoriteNode) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetFixedPosition) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_RemoveFixedPosition) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_SetTimeOnly) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_BeginEditSettings) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_CommitEditSettings) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_FactoryResetDevice) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_RebootOtaSeconds) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_ExitSimulator) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_RebootSeconds) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_ShutdownSeconds) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_FactoryResetConfig) isAdminMessage_PayloadVariant() {}

func (*AdminMessage_NodedbReset) isAdminMessage_PayloadVariant() {}

// Parameters for setting up Meshtastic for ameteur radio usage
type HamParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amateur radio call sign, eg. KD2ABC
	CallSign string `protobuf:"bytes,1,opt,name=call_sign,json=callSign,proto3" json:"call_sign,omitempty"`
	// Transmit power in dBm at the LoRA transceiver, not including any amplification
	TxPower int32 `protobuf:"varint,2,opt,name=tx_power,json=txPower,proto3" json:"tx_power,omitempty"`
	// The selected frequency of LoRA operation
	// Please respect your local laws, regulations, and band plans.
	// Ensure your radio is capable of operating of the selected frequency before setting this.
	Frequency float32 `protobuf:"fixed32,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Optional short name of user
	ShortName string `protobuf:"bytes,4,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
}

func (x *HamParameters) Reset() {
	*x = HamParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamParameters) ProtoMessage() {}

func (x *HamParameters) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamParameters.ProtoReflect.Descriptor instead.
func (*HamParameters) Descriptor() ([]byte, []int) {
	return file_meshtastic_admin_proto_rawDescGZIP(), []int{1}
}

func (x *HamParameters) GetCallSign() string {
	if x != nil {
		return x.CallSign
	}
	return ""
}

func (x *HamParameters) GetTxPower() int32 {
	if x != nil {
		return x.TxPower
	}
	return 0
}

func (x *HamParameters) GetFrequency() float32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *HamParameters) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

// Response envelope for node_remote_hardware_pins
type NodeRemoteHardwarePinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nodes and their respective remote hardware GPIO pins
	NodeRemoteHardwarePins []*NodeRemoteHardwarePin `protobuf:"bytes,1,rep,name=node_remote_hardware_pins,json=nodeRemoteHardwarePins,proto3" json:"node_remote_hardware_pins,omitempty"`
}

func (x *NodeRemoteHardwarePinsResponse) Reset() {
	*x = NodeRemoteHardwarePinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRemoteHardwarePinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRemoteHardwarePinsResponse) ProtoMessage() {}

func (x *NodeRemoteHardwarePinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRemoteHardwarePinsResponse.ProtoReflect.Descriptor instead.
func (*NodeRemoteHardwarePinsResponse) Descriptor() ([]byte, []int) {
	return file_meshtastic_admin_proto_rawDescGZIP(), []int{2}
}

func (x *NodeRemoteHardwarePinsResponse) GetNodeRemoteHardwarePins() []*NodeRemoteHardwarePin {
	if x != nil {
		return x.NodeRemoteHardwarePins
	}
	return nil
}

var File_meshtastic_admin_proto protoreflect.FileDescriptor

var file_meshtastic_admin_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x1a, 0x18, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x65, 0x73,
	0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfa, 0x19, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x13,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x11, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x66, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x1a, 0x67, 0x65,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x2a, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x25, 0x67, 0x65, 0x74, 0x43, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5d, 0x0a, 0x2b, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x26, 0x67, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x18, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5d, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x19, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x12, 0x67, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x74,
	0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x24, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x20, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x25, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x21, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x61, 0x6d, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x48, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x48, 0x61, 0x6d, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x51, 0x0a, 0x25, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x69, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x20, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x26, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x69, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x21, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x66, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x44,
	0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x11,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x22, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x1e, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f,
	0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x6e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x13, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x64,
	0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x45, 0x64, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x12,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x74, 0x61,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x10, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x4f, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x60, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78,
	0x69, 0x74, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0e, 0x72,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x61, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x64, 0x62, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x64, 0x62, 0x52, 0x65, 0x73, 0x65, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x53, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x4f, 0x52, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x08, 0x22, 0xbb,
	0x02, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x51, 0x54, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x54, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x4d, 0x53, 0x47, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x09, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x4d, 0x42, 0x49, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x58, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x0c, 0x42, 0x11, 0x0a, 0x0f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22,
	0x84, 0x01, 0x0a, 0x0d, 0x48, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x1e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x19, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x69, 0x6e, 0x52, 0x16,
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x50, 0x69, 0x6e, 0x73, 0x42, 0x60, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x65,
	0x65, 0x6b, 0x73, 0x76, 0x69, 0x6c, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x42, 0x0b, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0xaa, 0x02,
	0x14, 0x4d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x73, 0xba, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meshtastic_admin_proto_rawDescOnce sync.Once
	file_meshtastic_admin_proto_rawDescData = file_meshtastic_admin_proto_rawDesc
)

func file_meshtastic_admin_proto_rawDescGZIP() []byte {
	file_meshtastic_admin_proto_rawDescOnce.Do(func() {
		file_meshtastic_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_meshtastic_admin_proto_rawDescData)
	})
	return file_meshtastic_admin_proto_rawDescData
}

var file_meshtastic_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_meshtastic_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_meshtastic_admin_proto_goTypes = []interface{}{
	(AdminMessage_ConfigType)(0),           // 0: meshtastic.AdminMessage.ConfigType
	(AdminMessage_ModuleConfigType)(0),     // 1: meshtastic.AdminMessage.ModuleConfigType
	(*AdminMessage)(nil),                   // 2: meshtastic.AdminMessage
	(*HamParameters)(nil),                  // 3: meshtastic.HamParameters
	(*NodeRemoteHardwarePinsResponse)(nil), // 4: meshtastic.NodeRemoteHardwarePinsResponse
	(*Channel)(nil),                        // 5: meshtastic.Channel
	(*User)(nil),                           // 6: meshtastic.User
	(*Config)(nil),                         // 7: meshtastic.Config
	(*ModuleConfig)(nil),                   // 8: meshtastic.ModuleConfig
	(*DeviceMetadata)(nil),                 // 9: meshtastic.DeviceMetadata
	(*DeviceConnectionStatus)(nil),         // 10: meshtastic.DeviceConnectionStatus
	(*Position)(nil),                       // 11: meshtastic.Position
	(*NodeRemoteHardwarePin)(nil),          // 12: meshtastic.NodeRemoteHardwarePin
}
var file_meshtastic_admin_proto_depIdxs = []int32{
	5,  // 0: meshtastic.AdminMessage.get_channel_response:type_name -> meshtastic.Channel
	6,  // 1: meshtastic.AdminMessage.get_owner_response:type_name -> meshtastic.User
	0,  // 2: meshtastic.AdminMessage.get_config_request:type_name -> meshtastic.AdminMessage.ConfigType
	7,  // 3: meshtastic.AdminMessage.get_config_response:type_name -> meshtastic.Config
	1,  // 4: meshtastic.AdminMessage.get_module_config_request:type_name -> meshtastic.AdminMessage.ModuleConfigType
	8,  // 5: meshtastic.AdminMessage.get_module_config_response:type_name -> meshtastic.ModuleConfig
	9,  // 6: meshtastic.AdminMessage.get_device_metadata_response:type_name -> meshtastic.DeviceMetadata
	10, // 7: meshtastic.AdminMessage.get_device_connection_status_response:type_name -> meshtastic.DeviceConnectionStatus
	3,  // 8: meshtastic.AdminMessage.set_ham_mode:type_name -> meshtastic.HamParameters
	4,  // 9: meshtastic.AdminMessage.get_node_remote_hardware_pins_response:type_name -> meshtastic.NodeRemoteHardwarePinsResponse
	6,  // 10: meshtastic.AdminMessage.set_owner:type_name -> meshtastic.User
	5,  // 11: meshtastic.AdminMessage.set_channel:type_name -> meshtastic.Channel
	7,  // 12: meshtastic.AdminMessage.set_config:type_name -> meshtastic.Config
	8,  // 13: meshtastic.AdminMessage.set_module_config:type_name -> meshtastic.ModuleConfig
	11, // 14: meshtastic.AdminMessage.set_fixed_position:type_name -> meshtastic.Position
	12, // 15: meshtastic.NodeRemoteHardwarePinsResponse.node_remote_hardware_pins:type_name -> meshtastic.NodeRemoteHardwarePin
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_meshtastic_admin_proto_init() }
func file_meshtastic_admin_proto_init() {
	if File_meshtastic_admin_proto != nil {
		return
	}
	file_meshtastic_channel_proto_init()
	file_meshtastic_config_proto_init()
	file_meshtastic_connection_status_proto_init()
	file_meshtastic_mesh_proto_init()
	file_meshtastic_module_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_meshtastic_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRemoteHardwarePinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_meshtastic_admin_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AdminMessage_GetChannelRequest)(nil),
		(*AdminMessage_GetChannelResponse)(nil),
		(*AdminMessage_GetOwnerRequest)(nil),
		(*AdminMessage_GetOwnerResponse)(nil),
		(*AdminMessage_GetConfigRequest)(nil),
		(*AdminMessage_GetConfigResponse)(nil),
		(*AdminMessage_GetModuleConfigRequest)(nil),
		(*AdminMessage_GetModuleConfigResponse)(nil),
		(*AdminMessage_GetCannedMessageModuleMessagesRequest)(nil),
		(*AdminMessage_GetCannedMessageModuleMessagesResponse)(nil),
		(*AdminMessage_GetDeviceMetadataRequest)(nil),
		(*AdminMessage_GetDeviceMetadataResponse)(nil),
		(*AdminMessage_GetRingtoneRequest)(nil),
		(*AdminMessage_GetRingtoneResponse)(nil),
		(*AdminMessage_GetDeviceConnectionStatusRequest)(nil),
		(*AdminMessage_GetDeviceConnectionStatusResponse)(nil),
		(*AdminMessage_SetHamMode)(nil),
		(*AdminMessage_GetNodeRemoteHardwarePinsRequest)(nil),
		(*AdminMessage_GetNodeRemoteHardwarePinsResponse)(nil),
		(*AdminMessage_EnterDfuModeRequest)(nil),
		(*AdminMessage_DeleteFileRequest)(nil),
		(*AdminMessage_SetScale)(nil),
		(*AdminMessage_SetOwner)(nil),
		(*AdminMessage_SetChannel)(nil),
		(*AdminMessage_SetConfig)(nil),
		(*AdminMessage_SetModuleConfig)(nil),
		(*AdminMessage_SetCannedMessageModuleMessages)(nil),
		(*AdminMessage_SetRingtoneMessage)(nil),
		(*AdminMessage_RemoveByNodenum)(nil),
		(*AdminMessage_SetFavoriteNode)(nil),
		(*AdminMessage_RemoveFavoriteNode)(nil),
		(*AdminMessage_SetFixedPosition)(nil),
		(*AdminMessage_RemoveFixedPosition)(nil),
		(*AdminMessage_SetTimeOnly)(nil),
		(*AdminMessage_BeginEditSettings)(nil),
		(*AdminMessage_CommitEditSettings)(nil),
		(*AdminMessage_FactoryResetDevice)(nil),
		(*AdminMessage_RebootOtaSeconds)(nil),
		(*AdminMessage_ExitSimulator)(nil),
		(*AdminMessage_RebootSeconds)(nil),
		(*AdminMessage_ShutdownSeconds)(nil),
		(*AdminMessage_FactoryResetConfig)(nil),
		(*AdminMessage_NodedbReset)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meshtastic_admin_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtastic_admin_proto_goTypes,
		DependencyIndexes: file_meshtastic_admin_proto_depIdxs,
		EnumInfos:         file_meshtastic_admin_proto_enumTypes,
		MessageInfos:      file_meshtastic_admin_proto_msgTypes,
	}.Build()
	File_meshtastic_admin_proto = out.File
	file_meshtastic_admin_proto_rawDesc = nil
	file_meshtastic_admin_proto_goTypes = nil
	file_meshtastic_admin_proto_depIdxs = nil
}
